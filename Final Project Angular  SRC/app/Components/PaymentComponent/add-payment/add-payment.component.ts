import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { PaymentDTO } from 'src/app/DTO/PaymentDto';
import { PaymentService } from 'src/app/Services/Payment/payment.service';

@Component({
  selector: 'app-add-payment',
  templateUrl: './add-payment.component.html',
  styleUrls: ['./add-payment.component.css']
})
export class AddPaymentComponent {
  // paymentForm!: FormGroup;

  constructor(private fb: FormBuilder, private paymentService: PaymentService) {}

  // ngOnInit(): void {
  //   this.initializeForm();
  // }

  // initializeForm(): void {
  //   this.paymentForm = this.fb.group({
  //     paymentId: [0, Validators.required],
  //     amount: [0, [Validators.required, Validators.min(0.01)]],
  //     paymentDate: ['', Validators.required],
  //     paymentMethod: ['', Validators.required],
  //     status: ['PENDING', Validators.required],
  //     userId: ['', Validators.required],
  //     bookingId: ['', Validators.required]
  //   });
  // }

  // onSubmit(): void {
  //   if (this.paymentForm.valid) {
  //     const payment: Payment = this.paymentForm.value;

  //     // Call the addPlayer service method to send payment to backend
  //     this.paymentService.addPayment(payment).subscribe(
  //       response => {
  //         console.log('Payment added successfully:', response);
  //       },
  //       error => {
  //         console.error('Error adding payment:', error);
  //       }
  //     );
  //   } else {
  //     console.error('Form is invalid');
  //   }
  // }
  paymentForm!: FormGroup;

  // Enum values for dropdowns
  paymentMethods = ['CASH', 'CREDIT_CARD', 'DEBIT_CARD', 'ONLINE'];
  paymentStatuses = ['PENDING', 'PAID', 'FAILED'];

  // constructor(private fb: FormBuilder) {}

  ngOnInit(): void {
    // Define the reactive form structure with validations
    this.paymentForm = this.fb.group({
      paymentId: [null], // Optional as it's autogenerated
      amount: [null, [Validators.required, Validators.min(0.01)]],
      paymentDate: [null, Validators.required],
      paymentMethod: [null, Validators.required],
      status: [null, Validators.required],
      userId: [null, Validators.required],
      bookingId: [null, Validators.required],
    });
  }

  // Convenience getter for accessing form controls
  // get f() {
  //   return this.paymentForm.controls;
  // }
  get f(): { [key: string]: any } {
    return this.paymentForm.controls;
  }

  // Submit function
  onSubmit(): void {
    if (this.paymentForm.valid) {
          const paymentDto: PaymentDTO = this.paymentForm.value;
    
          // Call the addPlayer service method to send payment to backend
          this.paymentService.addPayment(paymentDto).subscribe(
            response => {

              console.log('Payment added successfully:', response);
              alert("Payement Added Successfully")
            },
            error => {
              console.error('Error adding payment:', error);
            }
          );
        } else {
          console.error('Form is invalid');
        }
  }
  }

